type Query {
  info: String!
  getAllExercises: [Exercise!]!
  getExerciseById(id: ID!): Exercise
  getAllWorkouts: [Workout!]!
  getWorkoutById(id: ID!): Workout
}

type Mutation {
  addExercise(name: String!, muscleGroup: String!): Exercise!
  updateExercise(id: ID!, name: String, muscleGroup: String): Exercise
  deleteExercise(id: ID!): Exercise

  addWorkout(name: String!): Workout!
  updateWorkout(id: ID!, name: String): Workout
  deleteWorkout(id: ID!): Workout
  
  addExercisesOnWorkouts(exerciseId: ID!, workoutId: ID!, sets: Int!, reps: Int!): ExercisesOnWorkouts
  updateExercisesOnWorkouts(id: ID!, exerciseId: ID!, workoutId: ID!, sets: Int!, reps: Int!): ExercisesOnWorkouts
  deleteExercisesOnWorkouts(id: ID!): ExercisesOnWorkouts

  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

type Exercise {
  id: ID!
  name: String!
  muscleGroup: String!
  exercisesOnWorkouts: [ExercisesOnWorkouts]!
}

type Workout {
  id: ID!
  name: String!
  exercisesOnWorkouts: [ExercisesOnWorkouts]!
  user: User
}

type ExercisesOnWorkouts {
  exercise: Exercise
  workout: Workout
  sets: Int!
  reps: Int!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String
  email: String
  workouts: [Workout!]!
}